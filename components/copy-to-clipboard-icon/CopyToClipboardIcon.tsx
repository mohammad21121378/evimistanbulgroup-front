import copyToClipboard from "@/screens/our-insights/insight-details/utils/copyToClipboard";
import classNames from "classnames";
import { useState } from "react";

import styles from './CopyToClipboardIcon.module.css'

type Props = {
    url: string
}

export default function CopyToClipboardIcon({ url }: Props) {

    const [copyedToClipboard, setCopyedToClipboard] = useState(false)

    return (
        <div className="size-6">
            <a onClick={() => copyToClipboard(url, setCopyedToClipboard)} role="button" aria-label="Copy Link">
                {copyedToClipboard ? (
                    <span className="relative inline-flex items-center justify-center w-6 h-6">

                        <span className={classNames("absolute w-full h-full rounded-full outline outline-2 outline-slate-500", styles.animateSuccessPulse)}></span>

                        <svg xmlns="http://www.w3.org/2000/svg" width="1.5rem" fill="currentColor" className="bi bi-check-lg text-slate-500" viewBox="0 0 16 16">
                            <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                        </svg>

                    </span>
                ) : (
                    <svg width="1.55rem" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.4794 6.505C13.511 7.55833 14.0269 8.82333 14.0269 10.3C14.0269 11.7767 13.511 13.0308 12.4794 14.0625L10.0894 16.4525C9.05771 17.4842 7.80437 18 6.32937 18C4.85271 18 3.59271 17.4783 2.54938 16.435C1.50604 15.3917 0.984375 14.1325 0.984375 12.6575C0.984375 11.1808 1.50021 9.92667 2.53188 8.895L3.86687 7.5575C4.03187 7.39417 4.22521 7.35917 4.44688 7.4525C4.67021 7.5475 4.79354 7.71167 4.81687 7.945C4.84021 8.57833 4.95687 9.19917 5.16687 9.8075C5.23854 10.0192 5.19187 10.2067 5.02688 10.37L4.56938 10.8625C4.07771 11.3558 3.82604 11.9475 3.81437 12.6375C3.80271 13.3292 4.04271 13.9217 4.53437 14.415C5.02771 14.93 5.62604 15.1875 6.32937 15.1875C7.03104 15.1875 7.62854 14.9417 8.12187 14.45L10.4769 12.095C10.9685 11.6017 11.2144 11.0033 11.2144 10.3C11.2144 9.59667 10.9685 8.99917 10.4769 8.5075C10.3602 8.39083 10.2427 8.28583 10.1244 8.1925C9.96104 8.0975 9.87938 7.95667 9.87938 7.77C9.85604 7.34833 9.98521 6.99667 10.2669 6.715L11.0394 5.9775C11.2494 5.7425 11.4835 5.71917 11.7419 5.9075C12.0002 6.09417 12.246 6.29333 12.4794 6.505ZM13.6419 0C15.1169 0 16.376 0.521667 17.4194 1.565C18.4627 2.60833 18.9844 3.86833 18.9844 5.345C18.9844 6.82 18.4685 8.07333 17.4369 9.105L16.1019 10.4425C15.9369 10.6058 15.7435 10.6408 15.5219 10.5475C15.2985 10.4542 15.1752 10.29 15.1519 10.055C15.1285 9.42167 15.0119 8.80083 14.8019 8.1925C14.7302 7.98083 14.7769 7.79333 14.9419 7.63L15.3994 7.1375C15.891 6.64417 16.1427 6.0525 16.1544 5.3625C16.166 4.67083 15.926 4.07833 15.4344 3.585C14.941 3.07 14.3435 2.8125 13.6419 2.8125C12.9385 2.8125 12.3402 3.05833 11.8469 3.55L9.49187 5.9075C9.00021 6.39917 8.75437 6.99667 8.75437 7.7C8.75437 8.40333 9.00021 9.00083 9.49187 9.4925C9.60854 9.60917 9.72604 9.71417 9.84437 9.8075C10.0077 9.9025 10.0894 10.0433 10.0894 10.23C10.1127 10.6517 9.98438 11.0033 9.70438 11.285L8.92938 12.0225C8.71938 12.2575 8.48521 12.2817 8.22687 12.095C7.96854 11.9067 7.72271 11.7067 7.48938 11.495C6.45771 10.4417 5.94187 9.17667 5.94187 7.7C5.94187 6.22333 6.45771 4.96917 7.48938 3.9375L9.87938 1.5475C10.911 0.515833 12.1652 0 13.6419 0Z" fill="currentColor" /></svg>
                )}
            </a>
        </div>
    );
}